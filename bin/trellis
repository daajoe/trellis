#!/usr/bin/env python
#
# Copyright 2017
# Johannes K. Fichte, TU Wien, Austria
# Neha Lodha, TU Wien, Austria
# 
# trellis is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
# trellis is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.  You should have received a
# copy of the GNU General Public License along with
# trellis.  If not, see <http://www.gnu.org/licenses/>.
#
from __future__ import absolute_import, print_function

import argparse
import inspect
import json
import logging
import logging.config
import os
import signal
import subprocess
import sys
import tempfile
import time
from collections import defaultdict, OrderedDict
from datetime import datetime


src_path = os.path.abspath(os.path.realpath(inspect.getfile(inspect.currentframe())))
src_path = os.path.realpath(os.path.join(src_path, '../..'))

if src_path not in sys.path:
    sys.path.insert(0, src_path)

# TODO: not sure whether this works for package installation
import trellis
from trellis.decomposer import Decomposer

__author__ = 'Johannes K. Fichte'
__license__ = 'GPL'
__version__ = '1.0.1-dev'


def setup_logging(config_file='%s/logging.conf' % (os.path.dirname(__file__))):
    logging.config.fileConfig(config_file)


setup_logging(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'logging.conf'))


def is_valid_file(parser, arg):
    if not arg:
        parser.error('Missing file.')
    if not os.path.exists(arg):
        parser.error('The file "%s" does not exist!' % arg)


class Range(object):
    def __init__(self, start, end, log_scale=False):
        self.start = start
        self.end = end
        # used for pcs file generation only
        self.logscale = log_scale

    def __eq__(self, other):
        return self.start <= other <= self.end

    def __repr__(self):
        return '%s to %s' % (self.start, self.end)


class SolverArgs(object):
    def __init__(self, solver_list, dependency):
        self.dependency = dependency
        self.args = {}
        self.default = 'opt1'

        for solver in solver_list:
            i = 0
            sargs = OrderedDict()
            for arg in solver.args:
                i += 1
                sargs['opt%i' % i] = arg
            self.args[solver.__name__] = sargs

    def __str__(self):
        ret = ''
        for k, v in self.args.iteritems():
            ret += '%s (%s); ' % (','.join(v.keys()), k)
        return ret

    def __eq__(self, other):
        # TODO:
        # print other
        return True

    # def __repr__(self):
    #     pass

    def help_str(self):
        ret = ''
        for k, v in self.args.iteritems():
            opts = ''
            for opt, opt_val in v.iteritems():
                opts += '%s/%s: "%s"; ' % (k, opt, opt_val)
            ret += '%s' % opts
        return ret

    def get_selected_arg(self, solver_name, args):
        try:
            return self.args[solver_name][args]
        except KeyError as e:
            logging.error("Unknown option.")
            logging.error("Selected option %s for solver %s." % (args, solver_name))
            logging.error("However known options are as follows:")
            for item, value in self.args[solver_name].iteritems():
                logging.error("%s (%s)" % (item, value))
            logging.error("Exiting...")
            exit(2)


# TOOD: add own SAT/ASP-based solver
available_local_solvers = [trellis.decomposer.Tamaki2016, trellis.decomposer.Tamaki2017, trellis.decomposer.Jdrasil2016,
                           trellis.decomposer.Jdrasil2017, trellis.decomposer.TdLib2017,
                           trellis.decomposer.BzTreewidth2016,
                           trellis.decomposer.HTD2016, trellis.decomposer.HTD2017,
                           trellis.decomposer.TdLibHeuristic2017, trellis.decomposer.Elithelli2016,
                           trellis.decomposer.JdrasilHeuristic2017, trellis.decomposer.TamakiHeuristic2017,
                           trellis.decomposer.Minfillbgmrs2017, trellis.decomposer.Minfillmrs2017,
                           trellis.decomposer.Mfjones2016, trellis.decomposer.Mrprajesh2016]

available_global_solvers = [trellis.decomposer.HTD2016, trellis.decomposer.HTD2017,
                            trellis.decomposer.FlowCutter2016, trellis.decomposer.FlowCutter2017,
                            trellis.decomposer.JdrasilHeuristic2017,
                            trellis.decomposer.TamakiHeuristic2017, trellis.decomposer.TdLibHeuristic2017,
                            trellis.decomposer.Minfillbgmrs2017, trellis.decomposer.Minfillmrs2017,
                            trellis.decomposer.Mfjones2016, trellis.decomposer.Mrprajesh2016,
                            trellis.decomposer.Elithelli2016]
available_extractors = [trellis.extractor.EdgeExtractor, trellis.extractor.ParamExtractor]


# pcs_grp = root_group.add_argument_group('pcs')
# default_grp = root_group.add_argument_group('defaults')
def names(x):
    return map(lambda x: "%s" % x.__name__, x)



# TODO: use configuration file for default solver configs and binary paths instead of take from solver
def parse_args():
    parser = argparse.ArgumentParser(description='%(prog)s -f instance')
    # parser.formatter_class._max_help_position = 120
    parser.add_argument('--version', action='version', version='%(prog)s {version}'.format(version=__version__))
    parser.add_argument('--runid', dest='runid', action='store', type=int, help='id of the current repeation',
                        default=1)

    parser.add_argument('-o', '--output', dest='output', action='store', type=lambda x: os.path.realpath(x),
                            help='output decomposition into file', default=None)

    root_group = parser.add_mutually_exclusive_group()
    root_group.add_argument('--pcs', dest='pcs', action='store_true',
                            help='output pcs file (see: https://automl.github.io/SMAC3/stable/manual.html)')
    # TODO: --pcs-reduced
    root_group.add_argument('-f', '--file', dest='instance', action='store', type=lambda x: os.path.realpath(x),
                            help='instance')
    # TODO: add extractors
    # ==================================================================================================================
    #                EXTRACTORS
    # ==================================================================================================================
    # TODO: add to LI constructor
    parser.add_argument('-e', '--extractor', dest='extractor', action='store', type=str, help='extractor',
                        choices=names(available_extractors), default=trellis.extractor.EdgeExtractor.__name__)
    parser.add_argument('-er', '--extractor_random', dest='extractor_random', action='store', type=bool,
                        help='Use a randomized bfs', choices=[True, False], default=False)
    parser.add_argument('-ec1', '--extractor_c1', dest='extractor_c1', action='store', type=float,
                        help='first constant for extractor', choices=[Range(0.0, 1.0, log_scale=True)], default=1.0)
    parser.add_argument('-ec2', '--extractor_c2', dest='extractor_c2', action='store', type=float,
                        help='second constant for extractor', choices=[Range(0.0, 1.0, log_scale=True)], default=0.5)
    parser.add_argument('-eb', '--extractor_beta', dest='extractor_beta', action='store', type=int,
                        help='distance from the root that forces nodes to be picked', choices=[1, 2, 3, 4], default=2)
    parser.add_argument('-eg', '--extractor_gamma', dest='extractor_gamma', action='store', type=int,
                        help='size of the subtree that is forced to be picked', choices=[Range(1, 20)], default=2)
    parser.add_argument('-ed', '--extractor_delta', dest='extractor_delta', action='store', type=int,
                        help='buffer for budget', choices=[Range(1, 20)], default=2)

    # ==================================================================================================================
    #                LOCAL SOLVER
    # ==================================================================================================================
    parser.add_argument('-lb', '--local_budget', dest='local_budget', action='store', type=int,
                        help='local budget (lb)',
                        choices=[Range(10, 250)], default=75)
    parser.add_argument('-lw', '--local_timeout', '--local_solver_wall_clock_limit', dest='local_timeout',
                        action='store', type=int, help='local timeout (lt) / wall clock limit in seconds',
                        choices=[Range(5, 172800, log_scale=True)], default=1800)
    # TODO: ensure that smaller than local_timeout
    # TODO: use timeout for jdrasil
    parser.add_argument('-lx', '--local_sat_timeout', '--local_solver_single_call', dest='local_sat_timeout',
                        action='store', type=int,
                        help='local sat timeout (lt-sat) / wall clock limit in seconds for a single sat call',
                        choices=[Range(5, 172800, log_scale=True)], default=900)
    # TODO:
    parser.add_argument('-ls', '--local_solver', dest='local_solver', action='store', help='local solver',
                        choices=names(available_local_solvers), default=trellis.decomposer.Jdrasil2017.__name__)
    largs = SolverArgs(available_local_solvers, dependency='local_solver')
    parser.add_argument('-la', '--local_solver_args', dest='local_solver_args', action='store', type=str,
                        help='arguments for the local solver values are as follows: %s' % largs.help_str(),
                        choices=[largs], default=largs.default)
    parser.add_argument('-ni', '--no_improvements', dest='local_solver_no_improvements', action='store', type=int,
                        help='the number of no-improvement rounds', choices=[Range(0, 100, log_scale=True)],
                        default=10)
    # ==================================================================================================================
    #                GLOBAL SOLVER
    # ==================================================================================================================
    parser.add_argument('-gw', '--global_timeout', '--global_solver_wall_clock_limit', dest='global_timeout',
                        action='store', type=int, help='global timout (gt) / wall clock limit in seconds',
                        choices=[Range(5, 7200, log_scale=True)], default=60)
    parser.add_argument('-gs', '--global_solver', dest='global_solver', action='store', help='global solver',
                        choices=names(available_global_solvers), default=trellis.decomposer.HTD2017.__name__)
    gargs = SolverArgs(available_global_solvers, dependency='global_solver')
    parser.add_argument('-ga', '--global_solver_args', dest='global_solver_args', action='store', type=str,
                        help='arguments for the global solver values are as follows: %s' % gargs.help_str(),
                        choices=[gargs], default=gargs.default)
    parser.add_argument('-t', '--tmp', dest='temp_path', action='store', type=str, help='unused',
                        default=tempfile.gettempdir())
    args = parser.parse_args()
    if args.pcs:
        sys.stdout.write('# generated by "%s --pcs"\n' % __file__)
        sys.stdout.write('# version "%s"\n' % __version__)
        sys.stdout.write('# date "%s"\n' % datetime.now())

        def type_mapping(x):
            x = x.__name__
            mapping = defaultdict(int='integer', float='real', str='categorical', bool='categorical')
            if mapping.has_key(x):
                return mapping[x]
            else:
                return None

        all_forbitten = []
        # noinspection PyProtectedMember
        for parameter in parser._actions:
            # noinspection PyProtectedMember
            if type(parameter) in (argparse._HelpAction, argparse._VersionAction):
                continue
            matching = next(s for s in parameter.option_strings if '--' in s)
            if matching:
                parameter_name = matching.replace('-', '')
            else:
                parameter_name = parameter.option_strings[0].replace('-', '')
            parameter_choices = None
            parameter_logscale = ''
            if isinstance(parameter.choices, list):
                if isinstance(parameter.choices[0], Range):
                    parameter_choices = parameter.choices[0]
                    parameter_logscale = 'log' if parameter_choices.logscale else ''
                elif isinstance(parameter.choices[0], SolverArgs):
                    parameter_choices = parameter.choices[0]
                    # TOOD:
                else:
                    # print 'here'
                    parameter_choices = parameter.choices
            parameter_type = type_mapping(parameter.type) if parameter.type else 'categorical'
            if parameter_choices:
                if isinstance(parameter_choices, Range):
                    choice = '[%i,%i]' % (parameter_choices.start, parameter_choices.end)
                elif isinstance(parameter_choices, SolverArgs):
                    # get all available options
                    av_args = set()
                    for solver, options in parameter_choices.args.iteritems():
                        av_args.update(set(options.keys()))
                    choice = '{%s}' % (','.join(av_args))
                    parameter_type = 'categorical'
                    # add as forbidden parameter configurations
                    for solver, options in parameter_choices.args.iteritems():
                        for option in av_args - set(options.keys()):
                            forbidden = '{%s=%s, %s=%s}' % (
                                parameter_choices.dependency, solver, parameter_name, option)
                            all_forbitten.append(forbidden)
                else:
                    choice = '{%s}' % (','.join(map(str, parameter_choices)))
                str2 = "%s %s %s [%s] %s" % (
                    parameter_name, parameter_type, choice, parameter.default, parameter_logscale)
                str2 = '%s # %s\n' % (str2.ljust(120, ' '), parameter.help)
                sys.stdout.write(str2)
        sys.stdout.write('# Forbidden Parameter Configurations\n')
        for s in all_forbitten:
            sys.stdout.write('%s\n' % s)
        exit(0)

    is_valid_file(parser, args.instance)
    gsolverargs = gargs.get_selected_arg(args.global_solver, args.global_solver_args)
    args.global_solver = getattr(trellis.decomposer, args.global_solver)(temp_path=args.temp_path, args=gsolverargs)
    lsolverargs = largs.get_selected_arg(args.local_solver, args.local_solver_args)
    args.local_solver = getattr(trellis.decomposer, args.local_solver)(temp_path=args.temp_path, args=lsolverargs)
    args.extractor = getattr(trellis.extractor, args.extractor)()
    return args


def json_clean(param):
    for k, v in param.iteritems():
        if isinstance(v, trellis.decomposer.Decomposer) or isinstance(v, trellis.extractor.Extractor):
            param[k] = str(v)
    return param


def main():
    args = parse_args()
    fname = args.instance
    local_solver = args.local_solver
    global_solver = args.global_solver
    timeout = args.local_timeout
    # TODO: allow multiple encoders for SAT based solving or move to alternative project
    # encoder = args.encoder
    runid = args.runid
    ni = args.local_solver_no_improvements
    lb = args.local_budget
    global_solver_timeout = args.global_timeout

    p = subprocess.Popen(['sha256sum', args.instance], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = p.communicate()
    rc = p.returncode
    logging.debug('Return code from sha256sum %s' % rc)
    sha = output.split()[0]

    signal.signal(signal.SIGTERM, trellis.utils.signals.handler)
    signal.signal(signal.SIGINT, trellis.utils.signals.handler)
    logging.warn('local_solver = %s\n' % local_solver)

    wall_start = time.time()

    LI = trellis.LocalImprovement(filename=fname, global_solver=global_solver, local_solver=local_solver)
    extractor_args = {'extractor_c1': args.extractor_c1, 'extractor_c2': args.extractor_c2,
                      'extractor_beta': args.extractor_beta, 'extractor_gamma': args.extractor_gamma,
                      'extractor_random': args.extractor_random, 'extractor_delta': args.extractor_delta}
    # TODO: ni as parameter
    td = LI.decompose(lt=timeout, lb=lb, ni=ni, gt=global_solver_timeout, extractor=args.extractor,
                      extractor_args=extractor_args)
    wall = time.time() - wall_start

    res = LI.statistics()
    # 'system_info': get_system_info(),
    res.update(
        {'wall': round(wall, 4), 'run': runid, 'hash': sha, 'args': json_clean(vars(args)),
         'global_solver_args': global_solver.args, 'global_solver_is_exact': not global_solver.is_heuristic,
         'local_solver_args': local_solver.args, 'local_solver_is_exact': not local_solver.is_heuristic})

    
    if args.output and not os.path.exists(args.output): 
        with open(args.output, 'w') as f:
            td.write(f)
    
    # TODO: add td_validate as submodule
    # print res
    sys.stdout.write(json.dumps(res, sort_keys=True))
    sys.stdout.write('\n')
    sys.stdout.flush()
    exit(0)


if __name__ == "__main__":
    main()
